##Adding some valid factor labels
levels(allData$Pclass) <- c("First","Second","Third")
levels(allData$Survived) <- c("Perished","Survived")
factorsToUse <- c("PassengerId", "Survived", "Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked")
allDataSF <- allData %>% select(one_of(factorsToUse))
titanicTest <-  allDataSF %>% filter(is.na(Survived))
titanicTrain <- allDataSF %>% filter(!is.na(Survived)) %>% select(-PassengerId)
## Set up parallel processing
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(42)
rf_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
rf_tunegrid <- expand.grid(.mtry=c(1:6))
model_rf <- train(Survived ~ . , data=titanicTrain, method='rf', preProcess = c("center", "scale"), trControl = rf_ctrl, tuneGrid = rf_tunegrid)
model_rf
plot(model_rf)
titanicPredictions_rf <- predict(model_rf,newdata=titanicTest)
titanicSubmission_rf <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_rf)-1)
write.csv(titanicSubmission_rf, file = "titanicSubmission_rf.csv", row.names = FALSE)
set.seed(42)
svm_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_svm <- train(Survived ~ . , data=titanicTrain, method='svmRadial', preProcess = c("center", "scale"), trControl = svm_ctrl, tuneLength = 15 )
titanicPredictions_svm <- predict(model_svm,newdata=titanicTest)
titanicSubmission_svm <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_svm)-1)
write.csv(titanicSubmission, file = "titanicSubmission_svm.csv", row.names = FALSE)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
rsvm=caretModelSpec(method='svmRadial', tuneLength=15)
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
names(titanicTest)
names(titanicTrain)
model_stacked
models
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
str(titanicTrain)
str(titanicTest)
titanicTestPid <- titanicTest %>% select("PassengerID")
titanicTestPid <- select(titanicTest,"PassengerID")
titanicTestPid <- titanicTest[,PassengerID]
titanicTestPid <- titanicTest[,"PassengerID"]
titanicTestPid <- titanicTest[,"PassengerId"]
titanicTestPid
titanicTest[,-"PassengerId"]
select(titanicTest, -"PassengerId")
select(titanicTest, -PassengerId)
titanicTestPid <- titanicTest[,"PassengerId"]
titanicTest <- select(titanicTest, -PassengerId)
titanicTest
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTestPid, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTestPid, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
,
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest, type="prob")
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest, type="prob")
newdata
x
colnames(x)
colnames(newdata)
vname
object$importance
object
rownames(object$importance)
colnames(x)
is.null(dim(object$importance)
)
dim(object$importance
)
names(object$importance)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15)
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
titanicTest <-  allDataSF %>% filter(is.na(Survived))
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerID, Survived = as.numeric(titanicPredictions_stacked)-1)
titanicTest$PassengerID
titanicTest
titanicTest$PassengerID
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
model_stacked
models_stacked
plot(models_stacked)
allData %>% filter(is.na(Embarked))
library(mice)
library(dplyr)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(parallel)
library(doParallel)
## Data was obtained from the kagggle challenge website
## https://www.kaggle.com/c/titanic/
##Train Data
trainURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/train.csv?sv=2015-12-11&sr=b&sig=sR2hRdWWjjygbvaWj3dCbjqBPzjrJ4gAQulu3w1xw2M%3D&se=2016-12-14T00%3A56%3A01Z&sp=r"
trainfile <- "./data/train.csv"
##Test Data
testURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/test.csv?sv=2015-12-11&sr=b&sig=cD%2BWsR6UgfAdMWvjquCBnQCYzVgJqDvL85fXpngwUko%3D&se=2016-12-14T00%3A56%3A33Z&sp=r"
testfile <- "./data/test.csv"
##Download
#download.file(trainURL,trainfile)
#download.file(testURL,testfile)
##Read
trainData <- read.csv(trainfile, na.strings = c("", " "), stringsAsFactors = FALSE)
testData <- read.csv(testfile, na.strings = c("", " "), stringsAsFactors = FALSE)
##Combine test and train data for initial exploration and imputation.
allData <- bind_rows(trainData, testData)
str(allData)
allData <- allData %>%
mutate(lastname = gsub('(.*),.*','\\1',Name)) %>%
mutate(title = gsub('.*, (\\w+).\\s.*','\\1',Name))
table(allData$title)
sapply(allData, function(x) sum(is.na(x)))
subset(allData, is.na(Fare))
p3Fares <- subset(allData, Pclass==3)
allData[1044,"Fare"] <- mean(p3Fares$Fare, na.rm = TRUE)
sapply(allData, function(x) sum(is.na(x)))
allData %>% filter(is.na(Embarked))
#allData <- allData %>% filter(!is.na(Embarked))
head(allData)
allData %>% filter(Pclass=1) %>% select(Embarked)
allData %>% filter(Pclass==1) %>% select(Embarked)
table(allData %>% filter(Pclass==1) %>% select(Embarked))
table(allData %>% filter(Pclass==1) %>% select(Embarked))
allData[62,"Embarked"]
allData[62,"Embarked"] <- "S"
allData[62,"Embarked"]
allData[830,"Embarked"]
allData[830,"Embarked"] <- "S"
library(mice)
library(dplyr)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(parallel)
library(doParallel)
## Data was obtained from the kagggle challenge website
## https://www.kaggle.com/c/titanic/
##Train Data
trainURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/train.csv?sv=2015-12-11&sr=b&sig=sR2hRdWWjjygbvaWj3dCbjqBPzjrJ4gAQulu3w1xw2M%3D&se=2016-12-14T00%3A56%3A01Z&sp=r"
trainfile <- "./data/train.csv"
##Test Data
testURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/test.csv?sv=2015-12-11&sr=b&sig=cD%2BWsR6UgfAdMWvjquCBnQCYzVgJqDvL85fXpngwUko%3D&se=2016-12-14T00%3A56%3A33Z&sp=r"
testfile <- "./data/test.csv"
##Download
#download.file(trainURL,trainfile)
#download.file(testURL,testfile)
##Read
trainData <- read.csv(trainfile, na.strings = c("", " "), stringsAsFactors = FALSE)
testData <- read.csv(testfile, na.strings = c("", " "), stringsAsFactors = FALSE)
##Combine test and train data for initial exploration and imputation.
allData <- bind_rows(trainData, testData)
str(allData)
allData <- allData %>%
mutate(lastname = gsub('(.*),.*','\\1',Name)) %>%
mutate(title = gsub('.*, (\\w+).\\s.*','\\1',Name))
table(allData$title)
sapply(allData, function(x) sum(is.na(x)))
subset(allData, is.na(Fare))
p3Fares <- subset(allData, Pclass==3)
allData[1044,"Fare"] <- mean(p3Fares$Fare, na.rm = TRUE)
sapply(allData, function(x) sum(is.na(x)))
allData %>% filter(is.na(Embarked))
#allData <- allData %>% filter(!is.na(Embarked))
table(allData %>% filter(Pclass==1) %>% select(Embarked))
allData[62,"Embarked"] <- "S"
allData[830,"Embarked"] <- "S"
##Factorizing
allData$Survived <- as.factor(allData$Survived)
allData$Pclass <- as.factor(allData$Pclass)
allData$Sex <- as.factor(allData$Sex)
allData$title <- as.factor(allData$title)
allData$title <- as.factor(allData$Embarked)
#allData$Parch <- as.factor(allData$Parch)
#allData$SibSp <- as.factor(allData$SibSp)
##Adding some valid factor labels
levels(allData$Pclass) <- c("First","Second","Third")
levels(allData$Survived) <- c("Perished","Survived")
factorsToUse <- c("PassengerId", "Survived", "Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked")
allDataSF <- allData %>% select(one_of(factorsToUse))
titanicTest <-  allDataSF %>% filter(is.na(Survived))
titanicTrain <- allDataSF %>% filter(!is.na(Survived)) %>% select(-PassengerId)
## Set up parallel processing
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(42)
rf_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
rf_tunegrid <- expand.grid(.mtry=c(1:6))
model_rf <- train(Survived ~ . , data=titanicTrain, method='rf', preProcess = c("center", "scale"), trControl = rf_ctrl, tuneGrid = rf_tunegrid)
titanicPredictions_rf <- predict(model_rf,newdata=titanicTest)
titanicSubmission_rf <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_rf)-1)
write.csv(titanicSubmission_rf, file = "titanicSubmission_rf.csv", row.names = FALSE)
set.seed(42)
svm_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_svm <- train(Survived ~ . , data=titanicTrain, method='svmRadial', preProcess = c("center", "scale"), trControl = svm_ctrl, tuneLength = 15 )
titanicPredictions_svm <- predict(model_svm,newdata=titanicTest)
titanicSubmission_svm <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_svm)-1)
write.csv(titanicSubmission, file = "titanicSubmission_svm.csv", row.names = FALSE)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15)
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
models(stacked)
models_stacked
models
models_stacked$ens_model
models_stacked$error
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
titanicPredictions_stacked <- predict(modelds_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
model_rf
model_rf
model_rf$modelInfo
model_rf$method
model_rf$results
model_rf$pred
model_rf$bestTune
model_rf$finalModel
set.seed(42)
xgbLinear_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_xgbLinear <- train(Survived ~ . , data=titanicTrain, method='xgbLinear', preProcess = c("center", "scale"), trControl = xgbLinear_ctrl)
set.seed(42)
xgbLinear_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_xgbLinear <- train(Survived ~ . , data=titanicTrain, method='xgbLinear', preProcess = c("center", "scale"), trControl = xgbLinear_ctrl)
model_xgbLinear
titanicPredictions_xgblinear <- predict(model_xgbLinear,newdata=titanicTest)
titanicSubmission_xgblinear <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_xgblinear)-1)
write.csv(titanicSubmission, file = "titanicSubmission_xgblinear.csv", row.names = FALSE)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15),
xgbLinear=caretModelSpec(method='xbgLinear')
))
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15),
xgbLinear=caretModelSpec(method='xgbLinear')
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
models_stacked
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
models
library(mice)
library(dplyr)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(parallel)
library(doParallel)
## Data was obtained from the kagggle challenge website
## https://www.kaggle.com/c/titanic/
##Train Data
trainURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/train.csv?sv=2015-12-11&sr=b&sig=sR2hRdWWjjygbvaWj3dCbjqBPzjrJ4gAQulu3w1xw2M%3D&se=2016-12-14T00%3A56%3A01Z&sp=r"
trainfile <- "./data/train.csv"
##Test Data
testURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/test.csv?sv=2015-12-11&sr=b&sig=cD%2BWsR6UgfAdMWvjquCBnQCYzVgJqDvL85fXpngwUko%3D&se=2016-12-14T00%3A56%3A33Z&sp=r"
testfile <- "./data/test.csv"
##Download
#download.file(trainURL,trainfile)
#download.file(testURL,testfile)
##Read
trainData <- read.csv(trainfile, na.strings = c("", " "), stringsAsFactors = FALSE)
testData <- read.csv(testfile, na.strings = c("", " "), stringsAsFactors = FALSE)
##Combine test and train data for initial exploration and imputation.
allData <- bind_rows(trainData, testData)
str(allData)
allData <- allData %>%
mutate(lastname = gsub('(.*),.*','\\1',Name)) %>%
mutate(title = gsub('.*, (\\w+).\\s.*','\\1',Name))
table(allData$title)
sapply(allData, function(x) sum(is.na(x)))
subset(allData, is.na(Fare))
p3Fares <- subset(allData, Pclass==3)
allData[1044,"Fare"] <- mean(p3Fares$Fare, na.rm = TRUE)
sapply(allData, function(x) sum(is.na(x)))
allData %>% filter(is.na(Embarked))
#allData <- allData %>% filter(!is.na(Embarked))
table(allData %>% filter(Pclass==1) %>% select(Embarked))
allData[62,"Embarked"] <- "S"
allData[830,"Embarked"] <- "S"
##Factorizing
allData$Survived <- as.factor(allData$Survived)
allData$Pclass <- as.factor(allData$Pclass)
allData$Sex <- as.factor(allData$Sex)
allData$title <- as.factor(allData$title)
allData$Embarked <- as.factor(allData$Embarked)
#allData$Parch <- as.factor(allData$Parch)
#allData$SibSp <- as.factor(allData$SibSp)
##Adding some valid factor labels
levels(allData$Pclass) <- c("First","Second","Third")
levels(allData$Survived) <- c("Perished","Survived")
factorsToUse <- c("PassengerId", "Survived", "Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked")
allDataSF <- allData %>% select(one_of(factorsToUse))
titanicTest <-  allDataSF %>% filter(is.na(Survived))
titanicTrain <- allDataSF %>% filter(!is.na(Survived)) %>% select(-PassengerId)
## Set up parallel processing
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(42)
rf_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
rf_tunegrid <- expand.grid(.mtry=c(1:6))
model_rf <- train(Survived ~ . , data=titanicTrain, method='rf', preProcess = c("center", "scale"), trControl = rf_ctrl, tuneGrid = rf_tunegrid)
titanicPredictions_rf <- predict(model_rf,newdata=titanicTest)
titanicSubmission_rf <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_rf)-1)
write.csv(titanicSubmission_rf, file = "titanicSubmission_rf.csv", row.names = FALSE)
set.seed(42)
svm_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_svm <- train(Survived ~ . , data=titanicTrain, method='svmRadial', preProcess = c("center", "scale"), trControl = svm_ctrl, tuneLength = 15 )
titanicPredictions_svm <- predict(model_svm,newdata=titanicTest)
titanicSubmission_svm <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_svm)-1)
write.csv(titanicSubmission, file = "titanicSubmission_svm.csv", row.names = FALSE)
set.seed(42)
xgbLinear_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_xgbLinear <- train(Survived ~ . , data=titanicTrain, method='xgbLinear', preProcess = c("center", "scale"), trControl = xgbLinear_ctrl)
titanicPredictions_xgblinear <- predict(model_xgbLinear,newdata=titanicTest)
titanicSubmission_xgblinear <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_xgblinear)-1)
write.csv(titanicSubmission, file = "titanicSubmission_xgblinear.csv", row.names = FALSE)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15),
xgbLinear=caretModelSpec(method='xgbLinear')
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
models
models_stacked$error
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
##Select the data we want to use for imputation.
vars <- c("Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked", "Age")
allDataMice <- allData %>% select(one_of(vars))
miceout <- mice(allDataMice)
miceout
histogram(allData$Age)
mice_values <- complete(mice_out)
mice_out <- mice(allDataMice)
mice_values <- complete(mice_out)
mice_values
sum(is.na(mice_values$Age))
histogram(mice_values$Age)
dim(mice_value)
dim(mice_values)
mice_values$Age
allData$Age <- mice_values$Age
sapply(allData, function(x) sum(is.na(x)))
library(mice)
library(dplyr)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(parallel)
library(doParallel)
## Data was obtained from the kagggle challenge website
## https://www.kaggle.com/c/titanic/
##Train Data
trainURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/train.csv?sv=2015-12-11&sr=b&sig=sR2hRdWWjjygbvaWj3dCbjqBPzjrJ4gAQulu3w1xw2M%3D&se=2016-12-14T00%3A56%3A01Z&sp=r"
trainfile <- "./data/train.csv"
##Test Data
testURL <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3136/test.csv?sv=2015-12-11&sr=b&sig=cD%2BWsR6UgfAdMWvjquCBnQCYzVgJqDvL85fXpngwUko%3D&se=2016-12-14T00%3A56%3A33Z&sp=r"
testfile <- "./data/test.csv"
##Download
#download.file(trainURL,trainfile)
#download.file(testURL,testfile)
##Read
trainData <- read.csv(trainfile, na.strings = c("", " "), stringsAsFactors = FALSE)
testData <- read.csv(testfile, na.strings = c("", " "), stringsAsFactors = FALSE)
##Combine test and train data for initial exploration and imputation.
allData <- bind_rows(trainData, testData)
str(allData)
allData <- allData %>%
mutate(lastname = gsub('(.*),.*','\\1',Name)) %>%
mutate(title = gsub('.*, (\\w+).\\s.*','\\1',Name))
table(allData$title)
sapply(allData, function(x) sum(is.na(x)))
subset(allData, is.na(Fare))
p3Fares <- subset(allData, Pclass==3)
allData[1044,"Fare"] <- mean(p3Fares$Fare, na.rm = TRUE)
##Select the data we want to use for imputation.
vars <- c("Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked", "Age")
allDataMice <- allData %>% select(one_of(vars))
mice_out <- mice(allDataMice)
mice_values <- complete(mice_out)
allData$Age <- mice_values$Age
sapply(allData, function(x) sum(is.na(x)))
allData %>% filter(is.na(Embarked))
#allData <- allData %>% filter(!is.na(Embarked))
table(allData %>% filter(Pclass==1) %>% select(Embarked))
allData[62,"Embarked"] <- "S"
allData[830,"Embarked"] <- "S"
##Factorizing
allData$Survived <- as.factor(allData$Survived)
allData$Pclass <- as.factor(allData$Pclass)
allData$Sex <- as.factor(allData$Sex)
allData$title <- as.factor(allData$title)
allData$Embarked <- as.factor(allData$Embarked)
#allData$Parch <- as.factor(allData$Parch)
#allData$SibSp <- as.factor(allData$SibSp)
##Adding some valid factor labels
levels(allData$Pclass) <- c("First","Second","Third")
levels(allData$Survived) <- c("Perished","Survived")
factorsToUse <- c("PassengerId", "Survived", "Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked", "Age")
allDataSF <- allData %>% select(one_of(factorsToUse))
titanicTest <-  allDataSF %>% filter(is.na(Survived))
titanicTrain <- allDataSF %>% filter(!is.na(Survived)) %>% select(-PassengerId)
## Set up parallel processing
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
set.seed(42)
rf_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
rf_tunegrid <- expand.grid(.mtry=c(1:6))
model_rf <- train(Survived ~ . , data=titanicTrain, method='rf', preProcess = c("center", "scale"), trControl = rf_ctrl, tuneGrid = rf_tunegrid)
titanicPredictions_rf <- predict(model_rf,newdata=titanicTest)
titanicSubmission_rf <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_rf)-1)
write.csv(titanicSubmission_rf, file = "titanicSubmission_rf.csv", row.names = FALSE)
set.seed(42)
svm_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_svm <- train(Survived ~ . , data=titanicTrain, method='svmRadial', preProcess = c("center", "scale"), trControl = svm_ctrl, tuneLength = 15 )
titanicPredictions_svm <- predict(model_svm,newdata=titanicTest)
titanicSubmission_svm <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_svm)-1)
write.csv(titanicSubmission, file = "titanicSubmission_svm.csv", row.names = FALSE)
set.seed(42)
xgbLinear_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE)
model_xgbLinear <- train(Survived ~ . , data=titanicTrain, method='xgbLinear', preProcess = c("center", "scale"), trControl = xgbLinear_ctrl)
titanicPredictions_xgblinear <- predict(model_xgbLinear,newdata=titanicTest)
titanicSubmission_xgblinear <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_xgblinear)-1)
write.csv(titanicSubmission, file = "titanicSubmission_xgblinear.csv", row.names = FALSE)
set.seed(42)
##Tuning
stacked_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5, allowParallel=TRUE, classProbs=TRUE)
##Build Models
models <- caretList(Survived ~ . , data=titanicTrain, trControl = stacked_ctrl,
tuneList = list(
rf=caretModelSpec(method='rf', tuneGrid=rf_tunegrid),
svmRadial=caretModelSpec(method='svmRadial', tuneLength=15),
xgbLinear=caretModelSpec(method='xgbLinear')
))
##Combine them
stacked_tunegrid <- expand.grid(.mtry=c(1:6))
models_stacked <- caretStack(models, method="rf", metric="Accuracy", trControl=stacked_ctrl, tuneGrid=stacked_tunegrid)
titanicPredictions_stacked <- predict(models_stacked,newdata=titanicTest)
titanicSubmission_stacked <- data_frame(PassengerID = titanicTest$PassengerId, Survived = as.numeric(titanicPredictions_stacked)-1)
write.csv(titanicSubmission, file = "titanicSubmission_stacked.csv", row.names = FALSE)
model_rf
model_svm
model_xgbLinear
model_stacked
models_stacked
model_rf$modelInfo
model_rf$bestTune
names(titanicTrain)
